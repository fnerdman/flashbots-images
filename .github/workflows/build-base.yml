name: Build Base Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check systemd version
      run: systemctl --version

    - name: Install debian-archive-keyring
      run: sudo apt-get update && sudo apt-get install -y debian-archive-keyring

    - name: Enable unprivileged user namespaces
      run: |
        sudo sysctl -w kernel.unprivileged_userns_clone=1
        sudo sysctl -w user.max_user_namespaces=15000
        sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

    - name: Verify unshare functionality
      run: |
        echo "Testing unshare with setgroups..."
        unshare --user --map-root-user /bin/true
        echo "✓ unshare test passed - user namespaces are working correctly"

    - name: Setup ORAS
      uses: oras-project/setup-oras@v1
      with:
        version: 1.2.0

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test ORAS + Attestation Flow
      run: |
        # Create a small test file
        echo "Test artifact created at $(date -u)" > test-artifact.txt
        echo "Repository: ${{ github.repository }}" >> test-artifact.txt
        echo "Commit: ${{ github.sha }}" >> test-artifact.txt
        echo "Ref: ${{ github.ref }}" >> test-artifact.txt

        # Push test artifact with ORAS
        REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        oras push ghcr.io/$REPO_LOWER/test-artifacts:${{ github.sha }} \
          test-artifact.txt:text/plain

        # Get the digest for attestation
        DIGEST=$(oras resolve ghcr.io/$REPO_LOWER/test-artifacts:${{ github.sha }})
        echo "ARTIFACT_DIGEST=$DIGEST" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=ghcr.io/$REPO_LOWER/test-artifacts" >> $GITHUB_ENV
        echo "📦 Pushed test artifact with digest: $DIGEST"

    - name: Generate test attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.ARTIFACT_NAME }}
        subject-digest: ${{ env.ARTIFACT_DIGEST }}
        push-to-registry: true

    - name: Verify attestation works
      run: |
        echo "🔍 Verifying attestation for test artifact..."
        gh attestation verify oci://${{ env.ARTIFACT_NAME }}@${{ env.ARTIFACT_DIGEST }} \
          --owner ${{ github.repository_owner }}
        echo "✅ Attestation verification successful!"

    - name: Skip build for testing
      run: |
        echo "🚧 Skipping actual build steps for ORAS/attestation testing"
        echo "Remove this step and uncomment the build steps below when ready"
        exit 0

    # COMMENTED OUT FOR TESTING - UNCOMMENT WHEN ORAS FLOW WORKS
    # - name: Install Nix
    #   uses: cachix/install-nix-action@v27
    #   with:
    #     nix_path: nixpkgs=channel:nixos-unstable
    #     extra_nix_config: |
    #       experimental-features = nix-command flakes

    - name: Cache mkosi artifacts
      uses: actions/cache@v4
      with:
        path: |
          mkosi.cache
          mkosi.packages
        key: mkosi-cache-${{ runner.os }}-${{ hashFiles('base/base.conf', 'flake.lock') }}
        restore-keys: |
          mkosi-cache-${{ runner.os }}-

    - name: Build base image
      run: nix develop -c mkosi --force -I base/base.conf

    - name: List build artifacts
      run: ls -lh build/

    - name: Generate build info
      run: |
        echo "Build completed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" > build-info.txt
        echo "Git commit: ${{ github.sha }}" >> build-info.txt
        echo "Git ref: ${{ github.ref }}" >> build-info.txt
        echo "Runner OS: ${{ runner.os }}" >> build-info.txt
        echo "" >> build-info.txt
        echo "SHA256 checksums:" >> build-info.txt
        sha256sum build/tdx-debian.efi >> build-info.txt

    - name: Upload base image
      uses: actions/upload-artifact@v4
      with:
        name: base-image-${{ github.sha }}
        path: |
          build/tdx-debian.efi
          build/tdx-debian.manifest
          build-info.txt
        retention-days: 30
        if-no-files-found: error
        compression-level: 9
